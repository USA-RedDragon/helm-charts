controllers:
  valkey:
    # -- Controller type (statefulseet or deployment).
    type: statefulset
    containers:
      valkey:
        image:
          # -- Valkey image repository.
          repository: valkey/valkey
          # -- Valkey image tag.
          tag: alpine
        # @ignored
        command: [/scripts/start.sh]
        env:
          # -- Valkey password file path. Must match secret volume with existing key.
          VALKEY_PASSWORD_FILE: /secret/valkey-password
          # -- Valkey listen port.
          # @default -- Service `targetPort`
          VALKEY_PORT: "{{ .Values.service.valkey.ports.valkey.targetPort }}"
        resources:
          requests:
            # -- CPU reservation.
            cpu: 25m
            # -- Memory reservation.
            memory: 128Mi
            # -- Ephemeral storage reservation.
            ephemeral-storage: 50Mi
          limits:
            # -- Ephemeral storage limit.
            ephemeral-storage: 2Gi
        # -- Container security settings.
        # @default -- See [values.yaml](./values.yaml)
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities: {drop: [ALL]}
        # -- Container probes.
        # @default -- See [values.yaml](./values.yaml)
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              exec:
                command: [/scripts/liveness.sh]
              failureThreshold: 5
              timeoutSeconds: 6
          readiness:
            enabled: true
            custom: true
            spec:
              exec:
                command: [/scripts/readiness.sh]
              failureThreshold: 5
              timeoutSeconds: 2
          startup:
            enabled: true
            custom: true
            spec:
              exec:
                command: [/scripts/liveness.sh]
              failureThreshold: 30
              periodSeconds: 5
              timeoutSeconds: 6
    pod:
      # -- Pod security settings.
      # @default -- See [values.yaml](./values.yaml)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: {type: RuntimeDefault}

persistence:
  data:
    # -- Sets the persistence type (persistentVolumeClaim or emptyDir)
    type: persistentVolumeClaim
    # -- PVC storage class
    storageClass:
    # -- PVC access mode.
    accessMode: ReadWriteOnce
    # -- PVC size.
    size: 2Gi
    # -- Retain PVC when Helm chart is uninstalled.
    retain: true
  secret:
    # @ignored
    type: secret
    # -- Password secret name.
    # @default -- Release fullname
    name: '{{ template "bjw-s.common.lib.chart.names.fullname" . }}'
  # @ignored
  config:
    type: configMap
    identifier: config
  # @ignored
  scripts:
    type: configMap
    identifier: scripts
    defaultMode: 0o550

service:
  valkey:
    # @ignored
    controller: valkey
    ports:
      valkey:
        # -- Service port.
        port: 6379
        # -- Container listen port.
        targetPort: 6379

networkpolicies:
  # -- Default policy allows ingress from pods with label `valkey-client=true` and disallows all egress.
  # @default -- See [values.yaml](./values.yaml)
  default:
    # -- Enable the default network policy.
    enabled: true
    # @ignored
    controller: valkey
    # @ignored
    policyTypes: [Ingress, Egress]
    # @ignored
    rules:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  '{{ template "bjw-s.common.lib.chart.names.fullname" . }}-client': "true"
      egress: []

configMaps:
  config:
    data:
      # -- Valkey configuration file.
      # @default -- See [values.yaml](./values.yaml)
      valkey.conf: |
        # Enable AOF https://redis.io/topics/persistence#append-only-file
        appendonly yes
        # Disable RDB persistence, AOF persistence already enabled.
        save ""
  # @ignored
  scripts:
    data:
      # language=shell script
      start.sh: |
        #!/bin/sh
        [ -f $VALKEY_PASSWORD_FILE ] && export VALKEY_PASSWORD="$(cat "$VALKEY_PASSWORD_FILE")"
        exec valkey-server \
          /config/valkey.conf \
          --port "$VALKEY_PORT" \
          --requirepass "$VALKEY_PASSWORD" \
          --primaryauth "$VALKEY_PASSWORD" \
          "$@" $VALKEY_EXTRA_FLAGS
      # language=shell script
      ping.sh: |
        #!/bin/sh
        [ -f $VALKEY_PASSWORD_FILE ] && export VALKEY_PASSWORD="$(cat "$VALKEY_PASSWORD_FILE")"
        [ -n "$VALKEY_PASSWORD" ] && export REDISCLI_AUTH="$VALKEY_PASSWORD"
        exec valkey-cli -h localhost -p "$VALKEY_PORT" ping
      # language=shell script
      liveness.sh: |
        #!/bin/sh
        response="$(/scripts/ping.sh)"
        responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
        if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
          echo "$response"
          exit 1
        fi
      # language=shell script
      readiness.sh: |
        #!/bin/sh
        response="$(/scripts/ping.sh)"
        if [ "$response" != "PONG" ]; then
          echo "$response"
          exit 1
        fi
